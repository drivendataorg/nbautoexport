from enum import Enum
from pathlib import Path
from typing import List

from pydantic import BaseModel

from nbautoexport.utils import logger


SAVE_PROGRESS_INDICATOR_FILE = ".nbautoexport"


class ExportFormat(str, Enum):
    html = "html"
    latex = "latex"
    pdf = "pdf"
    slides = "slides"
    markdown = "markdown"
    asciidoc = "asciidoc"
    script = "script"
    notebook = "notebook"

    @classmethod
    def has_value(cls, value):
        return any(level for level in cls if level.value == value)


class OrganizeBy(str, Enum):
    notebook = "notebook"
    extension = "extension"


class NbAutoexportConfig(BaseModel):
    export_formats: List[ExportFormat] = ["script"]
    organize_by: OrganizeBy = "extension"
    autoclean: bool = False


def install_sentinel(
    export_formats: List[ExportFormat], organize_by: OrganizeBy, directory: Path, overwrite: bool
):
    """Writes the configuration file to a specified directory.

    Args:
        export_formats: A list of `nbconvert`-supported export formats to write on each save
        organize_by: Whether to organize exported files by notebook filename or in folders by extension
        directory: The directory containing the notebooks to monitor
        overwrite: Overwrite an existing sentinel file if one exists
    """
    sentinel_path = directory / SAVE_PROGRESS_INDICATOR_FILE

    if sentinel_path.exists() and (not overwrite):
        raise FileExistsError(
            f"""Detected existing autoexport configuration at {sentinel_path}. """
            """If you wish to overwrite, use the --overwrite flag."""
        )
    else:
        config = NbAutoexportConfig(export_formats=export_formats, organize_by=organize_by)

        logger.info(f"Creating configuration file at {sentinel_path}")
        logger.info(f"\n{config.json(indent=2)}")
        with sentinel_path.open("w") as fp:
            fp.write(config.json(indent=2))


def find_unwanted_outputs(directory: Path, config: NbAutoexportConfig) -> List[Path]:
    """Determine which subfolders or files in a given directory are not expected to be generated by
    current notebooks in that directory and given NbAutoexportConfig.

    Args:
        directory (Path): directory of notebooks
        config (NbAutoexportConfig): nbautoexport configuration

    Returns:
        List[Path]: list of paths
    """
    notebook_paths = directory.glob("*.ipynb")
    notebook_names = (f.stem for f in notebook_paths)

    to_remove = []
    subfolders = (f for f in directory.iterdir() if f.is_dir())
    if config.organize_by == "notebook":
        for subfolder in subfolders:
            if subfolder.name not in notebook_names:
                to_remove.append(subfolder)
    elif config.organize_by == "extension":
        for subfolder in subfolders:
            if subfolder.name in config.export_formats:
                # Check for individual files to remove
                for subfolder_file in subfolder.glob("*"):
                    if subfolder_file.stem not in notebook_names:
                        to_remove.append(subfolder_file)
            else:
                # Otherwise to remove entire subfolder
                to_remove.append(subfolder)

    return to_remove
