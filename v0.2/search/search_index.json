{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"nbautoexport Making it easier to code review Jupyter notebooks, one script at a time. nbautoexport automatically exports Jupyter notebooks to various file formats (.py, .html, and more) upon save while using Jupyter. One great use case is to automatically have script versions of your notebooks to facilitate code review commenting. Installation First, you will need to install nbautoexport . This should be installed in the same environment you are running Jupyter Notebook or Jupyter Lab from. nbautoexport is available either from PyPI via pip or from conda-forge via conda . pip install nbautoexport conda install nbautoexport --channel conda-forge Then, to register nbautoexport to run automatically while using Jupyter Notebook or Jupyter Lab, run: nbautoexport install If you already have a Jupyter server running, you will need to restart it for this to take effect. Simple usage Let's say you have a project and keep your notebooks in a notebooks/ subdirectory. To configure that directory for automatic exporting, run the following command: nbautoexport configure notebooks This will create a configuration file notebooks/.nbautoexport . If you've set up nbautoexport to work with Jupyter (using the install command as detailed in the previous section), then any time you save a notebook in Jupyter, a hook will run that checks whether there is a .nbautoexport configuration file in the same directory as the notebook. If so, it will use the settings specified in that file to export your notebook. By default, it will generate a script version of your notebook named after the notebook (with the .py extension) and saved in the directory notebooks/script . If everything is working, your notebooks directory should end up with files like the below example: notebooks \u251c\u2500\u25000.1-ejm-data-exploration.ipynb \u251c\u2500\u25000.2-ejm-feature-creation.ipynb \u2514\u2500\u2500 script \u2514\u2500\u2500 0.1-ejm-data-exploration.py \u2514\u2500\u2500 0.2-ejm-feature-creation.py Configuring export options The default .nbautoexport configuration file looks like this: { \"export_formats\": [ \"script\" ], \"organize_by\": \"extension\" } Upon save, this will lead to notebooks being exported to scripts which saved to the notebooks/script directory. notebooks \u251c\u2500\u25000.1-ejm-data-exploration.ipynb \u251c\u2500\u25000.2-ejm-feature-creation.ipynb \u2514\u2500\u2500 script \u2514\u2500\u2500 0.1-ejm-data-exploration.py \u2514\u2500\u2500 0.2-ejm-feature-creation.py An alternative way to organize exported files is to create a directory for each notebook. This can be handy for matching both the notebook and subdirectory when tab-completing and then globbing with * after the part that completed. nbautoexport configure notebooks --organize-by notebook notebooks \u251c\u2500\u2500 0.1-ejm-data-exploration \u2502 \u2514\u2500\u2500 0.1-ejm-data-exploration.py \u251c\u2500\u2500 0.2-ejm-feature-creation \u2502 \u2514\u2500\u2500 0.2-ejm-feature-creation.py \u251c\u2500\u25000.1-ejm-data-exploration.ipynb \u2514\u2500\u25000.2-ejm-feature-creation.ipynb If you do not like the settings you selected, you can always change them by either 1) re-running the nbautoexport command with new arguments and the --overwrite flag, or 2) manually editing the .nbautoexport file. You can also specify as many export formats as you'd like. We support most of the export formats available from nbconvert , such as html , md , and pdf . To specify formats, use the --export-format for each format you want to include. Advanced example nbautoexport configure sprint_one_notebooks -f script -f html --organize-by extension Upon save, this creates .py and .html versions of the Jupyter notebooks in sprint_one_notebooks folder and results in the following organization: notebooks \u251c\u2500\u25000.1-ejm-data-exploration.ipynb \u251c\u2500\u25000.2-ejm-feature-creation.ipynb \u251c\u2500\u2500 script \u2502 \u2514\u2500\u2500 0.1-ejm-data-exploration.py \u2502 \u2514\u2500\u2500 0.1-ejm-features-creation.py \u2514\u2500\u2500 html \u2514\u2500\u2500 0.1-ejm-data-exploration.html \u2514\u2500\u2500 0.1-ejm-features-creation.html More functionality The nbautoexport CLI has two additional commands: export is for ad hoc exporting of a notebook or directory of notebooks clean (EXPERIMENTAL) will delete files in a directory that are not generated by the current .nbautoexport configuration Use the --help flag to see the documentation. Command-line help nbautoexport --help Usage: nbautoexport [OPTIONS] COMMAND [ARGS]... Automatically export Jupyter notebooks to various file formats (.py, .html, and more) upon save. One great use case is to automatically have script versions of your notebooks to facilitate code review commenting. To set up, first use the 'install' command to register nbautoexport with Jupyter. If you already have a Jupyter server running, you will need to restart it. Next, you will need to use the 'configure' command to create a .nbautoexport configuration file in the same directory as the notebooks you want to have export automatically. Once nbautoexport is installed with the first step, exporting will run automatically when saving a notebook in Jupyter for any notebook where there is a .nbautoexport configuration file in the same directory. Options: --version Show nbautoexport version. --install-completion Install completion for the current shell. --show-completion Show completion for the current shell, to copy it or customize the installation. --help Show this message and exit. Commands: clean (EXPERIMENTAL) Remove subfolders/files not matching... configure Create a .nbautoexport configuration file in a directory. export Manually export notebook or directory of notebooks. install Register nbautoexport post-save hook with Jupyter. This repository was initially created using Cookiecutter with audreyr/cookiecutter-pypackage .","title":"Home"},{"location":"#nbautoexport","text":"Making it easier to code review Jupyter notebooks, one script at a time. nbautoexport automatically exports Jupyter notebooks to various file formats (.py, .html, and more) upon save while using Jupyter. One great use case is to automatically have script versions of your notebooks to facilitate code review commenting.","title":"nbautoexport"},{"location":"#installation","text":"First, you will need to install nbautoexport . This should be installed in the same environment you are running Jupyter Notebook or Jupyter Lab from. nbautoexport is available either from PyPI via pip or from conda-forge via conda . pip install nbautoexport conda install nbautoexport --channel conda-forge Then, to register nbautoexport to run automatically while using Jupyter Notebook or Jupyter Lab, run: nbautoexport install If you already have a Jupyter server running, you will need to restart it for this to take effect.","title":"Installation"},{"location":"#simple-usage","text":"Let's say you have a project and keep your notebooks in a notebooks/ subdirectory. To configure that directory for automatic exporting, run the following command: nbautoexport configure notebooks This will create a configuration file notebooks/.nbautoexport . If you've set up nbautoexport to work with Jupyter (using the install command as detailed in the previous section), then any time you save a notebook in Jupyter, a hook will run that checks whether there is a .nbautoexport configuration file in the same directory as the notebook. If so, it will use the settings specified in that file to export your notebook. By default, it will generate a script version of your notebook named after the notebook (with the .py extension) and saved in the directory notebooks/script . If everything is working, your notebooks directory should end up with files like the below example: notebooks \u251c\u2500\u25000.1-ejm-data-exploration.ipynb \u251c\u2500\u25000.2-ejm-feature-creation.ipynb \u2514\u2500\u2500 script \u2514\u2500\u2500 0.1-ejm-data-exploration.py \u2514\u2500\u2500 0.2-ejm-feature-creation.py","title":"Simple usage"},{"location":"#configuring-export-options","text":"The default .nbautoexport configuration file looks like this: { \"export_formats\": [ \"script\" ], \"organize_by\": \"extension\" } Upon save, this will lead to notebooks being exported to scripts which saved to the notebooks/script directory. notebooks \u251c\u2500\u25000.1-ejm-data-exploration.ipynb \u251c\u2500\u25000.2-ejm-feature-creation.ipynb \u2514\u2500\u2500 script \u2514\u2500\u2500 0.1-ejm-data-exploration.py \u2514\u2500\u2500 0.2-ejm-feature-creation.py An alternative way to organize exported files is to create a directory for each notebook. This can be handy for matching both the notebook and subdirectory when tab-completing and then globbing with * after the part that completed. nbautoexport configure notebooks --organize-by notebook notebooks \u251c\u2500\u2500 0.1-ejm-data-exploration \u2502 \u2514\u2500\u2500 0.1-ejm-data-exploration.py \u251c\u2500\u2500 0.2-ejm-feature-creation \u2502 \u2514\u2500\u2500 0.2-ejm-feature-creation.py \u251c\u2500\u25000.1-ejm-data-exploration.ipynb \u2514\u2500\u25000.2-ejm-feature-creation.ipynb If you do not like the settings you selected, you can always change them by either 1) re-running the nbautoexport command with new arguments and the --overwrite flag, or 2) manually editing the .nbautoexport file. You can also specify as many export formats as you'd like. We support most of the export formats available from nbconvert , such as html , md , and pdf . To specify formats, use the --export-format for each format you want to include.","title":"Configuring export options"},{"location":"#advanced-example","text":"nbautoexport configure sprint_one_notebooks -f script -f html --organize-by extension Upon save, this creates .py and .html versions of the Jupyter notebooks in sprint_one_notebooks folder and results in the following organization: notebooks \u251c\u2500\u25000.1-ejm-data-exploration.ipynb \u251c\u2500\u25000.2-ejm-feature-creation.ipynb \u251c\u2500\u2500 script \u2502 \u2514\u2500\u2500 0.1-ejm-data-exploration.py \u2502 \u2514\u2500\u2500 0.1-ejm-features-creation.py \u2514\u2500\u2500 html \u2514\u2500\u2500 0.1-ejm-data-exploration.html \u2514\u2500\u2500 0.1-ejm-features-creation.html","title":"Advanced example"},{"location":"#more-functionality","text":"The nbautoexport CLI has two additional commands: export is for ad hoc exporting of a notebook or directory of notebooks clean (EXPERIMENTAL) will delete files in a directory that are not generated by the current .nbautoexport configuration Use the --help flag to see the documentation.","title":"More functionality"},{"location":"#command-line-help","text":"nbautoexport --help Usage: nbautoexport [OPTIONS] COMMAND [ARGS]... Automatically export Jupyter notebooks to various file formats (.py, .html, and more) upon save. One great use case is to automatically have script versions of your notebooks to facilitate code review commenting. To set up, first use the 'install' command to register nbautoexport with Jupyter. If you already have a Jupyter server running, you will need to restart it. Next, you will need to use the 'configure' command to create a .nbautoexport configuration file in the same directory as the notebooks you want to have export automatically. Once nbautoexport is installed with the first step, exporting will run automatically when saving a notebook in Jupyter for any notebook where there is a .nbautoexport configuration file in the same directory. Options: --version Show nbautoexport version. --install-completion Install completion for the current shell. --show-completion Show completion for the current shell, to copy it or customize the installation. --help Show this message and exit. Commands: clean (EXPERIMENTAL) Remove subfolders/files not matching... configure Create a .nbautoexport configuration file in a directory. export Manually export notebook or directory of notebooks. install Register nbautoexport post-save hook with Jupyter. This repository was initially created using Cookiecutter with audreyr/cookiecutter-pypackage .","title":"Command-line help"},{"location":"cleaning/","text":"Cleaning (Experimental) While using nbautoexport , you may sometimes end up with leftover files you no longer want. Some ways this can happen are if you rename notebooks, or if you change your export configuration. The nbautoexport CLI has an experimental clean command to delete extraneous files. WARNING: the clean command can delete files irreversibly. Please use with care. Basic usage Let's say you have a project and keep your notebooks in a notebooks/ subdirectory. You can clean it with: nbautoexport clean notebooks/ Note that in order to use clean , this directory must be configured with nbautoexport , i.e., you have a notebooks/.nbautoexport configuration file. If you have some files that would be cleaned, you would see something that looks like this: Identified following files to clean up: notebooks/html/0.1-ejm-data-exploration.html notebooks/html/0.2-ejm-feature-creation.html notebooks/script/Untitled.py Are you sure you want to delete these files? [y/N]: \u2588 At this point, you can enter y to continue with the deletion or n to cancel the deletion. Alternatively, you can run the clean command with the --dry-run flag which will automatically exit at this point without performing any file deletion. How it works Let's say you have the following files: notebooks/ \u251c\u2500\u2500 .nbautoexport \u251c\u2500\u2500 0.1-ejm-data-exploration.ipynb \u251c\u2500\u2500 0.2-ejm-feature-creation.ipynb \u251c\u2500\u2500 html \u2502 \u251c\u2500\u2500 0.1-ejm-data-exploration.html \u2502 \u2514\u2500\u2500 0.2-ejm-feature-creation.html \u2514\u2500\u2500 script \u251c\u2500\u2500 0.1-ejm-data-exploration.py \u251c\u2500\u2500 0.2-ejm-feature-creation.py \u2514\u2500\u2500 Untitled.py and you have the following .nbautoexport configuration: { \"export_formats\": [ \"script\" ], \"organize_by\": \"extension\" } We have some extra files that we want to clean up: html/ has some exports from when we earlier had html as an export format. script/Untitled.py got saved when we had an Untitled.ipynb notebook before it was renamed. nbautoexport , based on the configuration file and the notebooks it finds, identifies which files are expected exports or other expected files based on normal nbautoexport and Jupyter usage. All other files found are marked for clean up. $ nbautoexport clean notebooks/ Identified following files to clean up: notebooks/html/0.1-ejm-data-exploration.html notebooks/html/0.2-ejm-feature-creation.html notebooks/script/Untitled.py Are you sure you want to delete these files? [y/N]: y Removing identified files... Removing empty subdirectories... notebooks/html Cleaning complete. After running clean , we end up with the following files: notebooks/ \u251c\u2500\u2500 .nbautoexport \u251c\u2500\u2500 0.1-ejm-data-exploration.ipynb \u251c\u2500\u2500 0.2-ejm-feature-creation.ipynb \u2514\u2500\u2500 script \u251c\u2500\u2500 0.1-ejm-data-exploration.py \u2514\u2500\u2500 0.2-ejm-feature-creation.py Excluding files Sometimes you may have additional files in the notebooks directory of your project that are intentional. You can use glob-style patterns indicate files to exclude from deletion. Building on the previous example, let's say we have the following files: notebooks/ \u251c\u2500\u2500 .nbautoexport \u251c\u2500\u2500 0.1-ejm-data-exploration.ipynb \u251c\u2500\u2500 0.2-ejm-feature-creation.ipynb \u251c\u2500\u2500 README.md \u251c\u2500\u2500 html \u2502 \u251c\u2500\u2500 0.1-ejm-data-exploration.html \u2502 \u2514\u2500\u2500 0.2-ejm-feature-creation.html \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 diagram.png \u2514\u2500\u2500 script \u251c\u2500\u2500 0.1-ejm-data-exploration.py \u251c\u2500\u2500 0.2-ejm-feature-creation.py \u2514\u2500\u2500 Untitled.py We have additional files that we want to keep: README.md images/diagram.png We can specify glob-style patterns to exclude from cleaning with the --clean-exclude flag in the configure command. Alternatively, we could also directly manually edit the .nbautoexport configuration file. nbautoexport configure notebooks/ \\ --overwrite \\ --clean-exclude README.md \\ --clean-exclude images/* { \"export_formats\": [ \"script\" ], \"organize_by\": \"extension\", \"clean\": { \"exclude\": [ \"README.md\", \"images/*\" ] } } Then, running the clean command: $ nbautoexport clean notebooks/ Excluding files from cleaning using the following patterns: README.md images/* Identified following files to clean up: notebooks/html/0.1-ejm-data-exploration.html notebooks/html/0.2-ejm-feature-creation.html notebooks/script/Untitled.py Are you sure you want to delete these files? [y/N]: y Removing identified files... Removing empty subdirectories... notebooks/html Cleaning complete. We can see that README.md and images/diagram.png are left alone. notebooks/ \u251c\u2500\u2500 .nbautoexport \u251c\u2500\u2500 0.1-ejm-data-exploration.ipynb \u251c\u2500\u2500 0.2-ejm-feature-creation.ipynb \u251c\u2500\u2500 README.md \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 diagram.png \u2514\u2500\u2500 script \u251c\u2500\u2500 0.1-ejm-data-exploration.py \u2514\u2500\u2500 0.2-ejm-feature-creation.py --exclude flag You can also provide patterns to exclude with the --exclude ( -e ) flag when calling clean . nbautoexport clean notebooks/ \\ --exclude README.md \\ --exclude images/* Any patterns specified this way will be used in addition to the patterns in the .nbautoexport configuration. Experimental status The clean command is experimental. The logic for identifying files to delete may be in need of improvement. If you have any feedback from using the clean command, please let us know by creating a GitHub issue .","title":"Cleaning (Experimental)"},{"location":"cleaning/#cleaning-experimental","text":"While using nbautoexport , you may sometimes end up with leftover files you no longer want. Some ways this can happen are if you rename notebooks, or if you change your export configuration. The nbautoexport CLI has an experimental clean command to delete extraneous files. WARNING: the clean command can delete files irreversibly. Please use with care.","title":"Cleaning (Experimental)"},{"location":"cleaning/#basic-usage","text":"Let's say you have a project and keep your notebooks in a notebooks/ subdirectory. You can clean it with: nbautoexport clean notebooks/ Note that in order to use clean , this directory must be configured with nbautoexport , i.e., you have a notebooks/.nbautoexport configuration file. If you have some files that would be cleaned, you would see something that looks like this: Identified following files to clean up: notebooks/html/0.1-ejm-data-exploration.html notebooks/html/0.2-ejm-feature-creation.html notebooks/script/Untitled.py Are you sure you want to delete these files? [y/N]: \u2588 At this point, you can enter y to continue with the deletion or n to cancel the deletion. Alternatively, you can run the clean command with the --dry-run flag which will automatically exit at this point without performing any file deletion.","title":"Basic usage"},{"location":"cleaning/#how-it-works","text":"Let's say you have the following files: notebooks/ \u251c\u2500\u2500 .nbautoexport \u251c\u2500\u2500 0.1-ejm-data-exploration.ipynb \u251c\u2500\u2500 0.2-ejm-feature-creation.ipynb \u251c\u2500\u2500 html \u2502 \u251c\u2500\u2500 0.1-ejm-data-exploration.html \u2502 \u2514\u2500\u2500 0.2-ejm-feature-creation.html \u2514\u2500\u2500 script \u251c\u2500\u2500 0.1-ejm-data-exploration.py \u251c\u2500\u2500 0.2-ejm-feature-creation.py \u2514\u2500\u2500 Untitled.py and you have the following .nbautoexport configuration: { \"export_formats\": [ \"script\" ], \"organize_by\": \"extension\" } We have some extra files that we want to clean up: html/ has some exports from when we earlier had html as an export format. script/Untitled.py got saved when we had an Untitled.ipynb notebook before it was renamed. nbautoexport , based on the configuration file and the notebooks it finds, identifies which files are expected exports or other expected files based on normal nbautoexport and Jupyter usage. All other files found are marked for clean up. $ nbautoexport clean notebooks/ Identified following files to clean up: notebooks/html/0.1-ejm-data-exploration.html notebooks/html/0.2-ejm-feature-creation.html notebooks/script/Untitled.py Are you sure you want to delete these files? [y/N]: y Removing identified files... Removing empty subdirectories... notebooks/html Cleaning complete. After running clean , we end up with the following files: notebooks/ \u251c\u2500\u2500 .nbautoexport \u251c\u2500\u2500 0.1-ejm-data-exploration.ipynb \u251c\u2500\u2500 0.2-ejm-feature-creation.ipynb \u2514\u2500\u2500 script \u251c\u2500\u2500 0.1-ejm-data-exploration.py \u2514\u2500\u2500 0.2-ejm-feature-creation.py","title":"How it works"},{"location":"cleaning/#excluding-files","text":"Sometimes you may have additional files in the notebooks directory of your project that are intentional. You can use glob-style patterns indicate files to exclude from deletion. Building on the previous example, let's say we have the following files: notebooks/ \u251c\u2500\u2500 .nbautoexport \u251c\u2500\u2500 0.1-ejm-data-exploration.ipynb \u251c\u2500\u2500 0.2-ejm-feature-creation.ipynb \u251c\u2500\u2500 README.md \u251c\u2500\u2500 html \u2502 \u251c\u2500\u2500 0.1-ejm-data-exploration.html \u2502 \u2514\u2500\u2500 0.2-ejm-feature-creation.html \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 diagram.png \u2514\u2500\u2500 script \u251c\u2500\u2500 0.1-ejm-data-exploration.py \u251c\u2500\u2500 0.2-ejm-feature-creation.py \u2514\u2500\u2500 Untitled.py We have additional files that we want to keep: README.md images/diagram.png We can specify glob-style patterns to exclude from cleaning with the --clean-exclude flag in the configure command. Alternatively, we could also directly manually edit the .nbautoexport configuration file. nbautoexport configure notebooks/ \\ --overwrite \\ --clean-exclude README.md \\ --clean-exclude images/* { \"export_formats\": [ \"script\" ], \"organize_by\": \"extension\", \"clean\": { \"exclude\": [ \"README.md\", \"images/*\" ] } } Then, running the clean command: $ nbautoexport clean notebooks/ Excluding files from cleaning using the following patterns: README.md images/* Identified following files to clean up: notebooks/html/0.1-ejm-data-exploration.html notebooks/html/0.2-ejm-feature-creation.html notebooks/script/Untitled.py Are you sure you want to delete these files? [y/N]: y Removing identified files... Removing empty subdirectories... notebooks/html Cleaning complete. We can see that README.md and images/diagram.png are left alone. notebooks/ \u251c\u2500\u2500 .nbautoexport \u251c\u2500\u2500 0.1-ejm-data-exploration.ipynb \u251c\u2500\u2500 0.2-ejm-feature-creation.ipynb \u251c\u2500\u2500 README.md \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 diagram.png \u2514\u2500\u2500 script \u251c\u2500\u2500 0.1-ejm-data-exploration.py \u2514\u2500\u2500 0.2-ejm-feature-creation.py","title":"Excluding files"},{"location":"cleaning/#-exclude-flag","text":"You can also provide patterns to exclude with the --exclude ( -e ) flag when calling clean . nbautoexport clean notebooks/ \\ --exclude README.md \\ --exclude images/* Any patterns specified this way will be used in addition to the patterns in the .nbautoexport configuration.","title":"--exclude flag"},{"location":"cleaning/#experimental-status","text":"The clean command is experimental. The logic for identifying files to delete may be in need of improvement. If you have any feedback from using the clean command, please let us know by creating a GitHub issue .","title":"Experimental status"},{"location":"api-reference/nbautoexport-clean/","text":"nbautoexport.clean find_files_to_clean ( directory , config ) Given path to a notebooks directory watched by nbautoexport, find all files that are not expected exports by current nbautoexport configuration and existing notebooks, or other expected Jupyter or nbautoexport files. Parameters: Name Type Description Default directory Path notebooks directory to find files to clean up required Returns: Type Description List[pathlib.Path] List[Path]: list of files to clean up Source code in nbautoexport/clean.py def find_files_to_clean ( directory : Path , config : NbAutoexportConfig ) -> List [ Path ]: \"\"\"Given path to a notebooks directory watched by nbautoexport, find all files that are not expected exports by current nbautoexport configuration and existing notebooks, or other expected Jupyter or nbautoexport files. Args: directory (Path): notebooks directory to find files to clean up Returns: List[Path]: list of files to clean up \"\"\" notebooks : List [ JupyterNotebook ] = find_notebooks ( directory ) expected_exports : List [ Path ] = get_expected_exports ( notebooks , config ) checkpoints = ( f for f in directory . glob ( \".ipynb_checkpoints/*\" ) if f . is_file ()) sentinel_path = directory / SAVE_PROGRESS_INDICATOR_FILE subfiles = ( f for f in directory . glob ( \"**/*\" ) if f . is_file ()) to_clean = ( set ( subfiles ) . difference ( nb . path for nb in notebooks ) . difference ( expected_exports ) . difference ( globs ( directory = directory , patterns = config . clean . exclude )) . difference ( checkpoints ) . difference ([ sentinel_path ]) ) return sorted ( to_clean ) get_expected_exports ( notebooks , config ) Given an iterable of Jupyter notebooks, return list of paths of files that nbautoexport would be expected to export to given this configuration. Parameters: Name Type Description Default notebooks Iterable[nbautoexport.utils.JupyterNotebook] iterable of notebooks required Returns: Type Description List[pathlib.Path] List[Path]: list of expected nbautoexport output files, relative to notebook files Source code in nbautoexport/clean.py def get_expected_exports ( notebooks : Iterable [ JupyterNotebook ], config : NbAutoexportConfig ) -> List [ Path ]: \"\"\"Given an iterable of Jupyter notebooks, return list of paths of files that nbautoexport would be expected to export to given this configuration. Args: notebooks (Iterable[JupyterNotebooks]): iterable of notebooks Returns: List[Path]: list of expected nbautoexport output files, relative to notebook files \"\"\" export_paths : Set [ Path ] = set () for notebook in notebooks : for export_format in config . export_formats : export_paths . update ( notebook_exports_generator ( notebook , export_format , config . organize_by ) ) return sorted ( export_paths ) get_extension ( notebook , export_format ) Given a notebook and export format, return expected export file extension. Parameters: Name Type Description Default notebook JupyterNotebook notebook to determine extension for required export_format ExportFormat export format name required Returns: Type Description str str: file extension, e.g., '.py' Source code in nbautoexport/clean.py def get_extension ( notebook : JupyterNotebook , export_format : ExportFormat ) -> str : \"\"\"Given a notebook and export format, return expected export file extension. Args: notebook (JupyterNotebook): notebook to determine extension for export_format (str): export format name Returns: str: file extension, e.g., '.py' \"\"\" # Script format needs notebook to determine appropriate language's extension if ExportFormat ( export_format ) == ExportFormat . script : return notebook . get_script_extension () exporter = get_exporter ( ExportFormat ( export_format ) . value ) if ExportFormat ( export_format ) == ExportFormat . notebook : return f \".nbconvert { exporter () . file_extension } \" return exporter () . file_extension globs ( directory , patterns ) Generator that yields paths matching glob-style patterns relative to directory. Parameters: Name Type Description Default directory Path a directory required patterns Iterable[str] glob-style patterns relative to directory required !!! yields Path: paths matching provided patterns relative to directory Source code in nbautoexport/clean.py def globs ( directory : Path , patterns : Iterable [ str ]) -> Iterable [ Path ]: \"\"\"Generator that yields paths matching glob-style patterns relative to directory. Args: directory (Path): a directory patterns (Iterable[str]): glob-style patterns relative to directory Yields: Path: paths matching provided patterns relative to directory \"\"\" for pattern in patterns : yield from directory . glob ( pattern ) notebook_exports_generator ( notebook , export_format , organize_by ) Generator that yields paths of expected exports for a notebook given an export_format and an organize_by setting. Parameters: Name Type Description Default notebook JupyterNotebook notebook to get export paths for required export_format ExportFormat export format required organize_by OrganizeBy type of subfolder approach required !!! yields Path: expected export paths given notebook and configuration options Source code in nbautoexport/clean.py def notebook_exports_generator ( notebook : JupyterNotebook , export_format : ExportFormat , organize_by : OrganizeBy ) -> Iterable [ Path ]: \"\"\"Generator that yields paths of expected exports for a notebook given an export_format and an organize_by setting. Args: notebook (JupyterNotebook): notebook to get export paths for export_format (ExportFormat): export format organize_by (OrganizeBy): type of subfolder approach Yields: Path: expected export paths given notebook and configuration options \"\"\" if organize_by == OrganizeBy . notebook : subfolder = notebook . path . parent / notebook . name elif organize_by == OrganizeBy . extension : subfolder = notebook . path . parent / export_format . value yield subfolder yield subfolder / f \" { notebook . name }{ get_extension ( notebook , export_format ) } \" if export_format in FORMATS_WITH_IMAGE_DIR : image_dir = subfolder / f \" { notebook . name } _files\" if image_dir . exists (): yield image_dir yield from image_dir . iterdir ()","title":"nbautoexport.clean"},{"location":"api-reference/nbautoexport-clean/#nbautoexportclean","text":"","title":"nbautoexport.clean"},{"location":"api-reference/nbautoexport-clean/#nbautoexport.clean.find_files_to_clean","text":"Given path to a notebooks directory watched by nbautoexport, find all files that are not expected exports by current nbautoexport configuration and existing notebooks, or other expected Jupyter or nbautoexport files. Parameters: Name Type Description Default directory Path notebooks directory to find files to clean up required Returns: Type Description List[pathlib.Path] List[Path]: list of files to clean up Source code in nbautoexport/clean.py def find_files_to_clean ( directory : Path , config : NbAutoexportConfig ) -> List [ Path ]: \"\"\"Given path to a notebooks directory watched by nbautoexport, find all files that are not expected exports by current nbautoexport configuration and existing notebooks, or other expected Jupyter or nbautoexport files. Args: directory (Path): notebooks directory to find files to clean up Returns: List[Path]: list of files to clean up \"\"\" notebooks : List [ JupyterNotebook ] = find_notebooks ( directory ) expected_exports : List [ Path ] = get_expected_exports ( notebooks , config ) checkpoints = ( f for f in directory . glob ( \".ipynb_checkpoints/*\" ) if f . is_file ()) sentinel_path = directory / SAVE_PROGRESS_INDICATOR_FILE subfiles = ( f for f in directory . glob ( \"**/*\" ) if f . is_file ()) to_clean = ( set ( subfiles ) . difference ( nb . path for nb in notebooks ) . difference ( expected_exports ) . difference ( globs ( directory = directory , patterns = config . clean . exclude )) . difference ( checkpoints ) . difference ([ sentinel_path ]) ) return sorted ( to_clean )","title":"find_files_to_clean()"},{"location":"api-reference/nbautoexport-clean/#nbautoexport.clean.get_expected_exports","text":"Given an iterable of Jupyter notebooks, return list of paths of files that nbautoexport would be expected to export to given this configuration. Parameters: Name Type Description Default notebooks Iterable[nbautoexport.utils.JupyterNotebook] iterable of notebooks required Returns: Type Description List[pathlib.Path] List[Path]: list of expected nbautoexport output files, relative to notebook files Source code in nbautoexport/clean.py def get_expected_exports ( notebooks : Iterable [ JupyterNotebook ], config : NbAutoexportConfig ) -> List [ Path ]: \"\"\"Given an iterable of Jupyter notebooks, return list of paths of files that nbautoexport would be expected to export to given this configuration. Args: notebooks (Iterable[JupyterNotebooks]): iterable of notebooks Returns: List[Path]: list of expected nbautoexport output files, relative to notebook files \"\"\" export_paths : Set [ Path ] = set () for notebook in notebooks : for export_format in config . export_formats : export_paths . update ( notebook_exports_generator ( notebook , export_format , config . organize_by ) ) return sorted ( export_paths )","title":"get_expected_exports()"},{"location":"api-reference/nbautoexport-clean/#nbautoexport.clean.get_extension","text":"Given a notebook and export format, return expected export file extension. Parameters: Name Type Description Default notebook JupyterNotebook notebook to determine extension for required export_format ExportFormat export format name required Returns: Type Description str str: file extension, e.g., '.py' Source code in nbautoexport/clean.py def get_extension ( notebook : JupyterNotebook , export_format : ExportFormat ) -> str : \"\"\"Given a notebook and export format, return expected export file extension. Args: notebook (JupyterNotebook): notebook to determine extension for export_format (str): export format name Returns: str: file extension, e.g., '.py' \"\"\" # Script format needs notebook to determine appropriate language's extension if ExportFormat ( export_format ) == ExportFormat . script : return notebook . get_script_extension () exporter = get_exporter ( ExportFormat ( export_format ) . value ) if ExportFormat ( export_format ) == ExportFormat . notebook : return f \".nbconvert { exporter () . file_extension } \" return exporter () . file_extension","title":"get_extension()"},{"location":"api-reference/nbautoexport-clean/#nbautoexport.clean.globs","text":"Generator that yields paths matching glob-style patterns relative to directory. Parameters: Name Type Description Default directory Path a directory required patterns Iterable[str] glob-style patterns relative to directory required !!! yields Path: paths matching provided patterns relative to directory Source code in nbautoexport/clean.py def globs ( directory : Path , patterns : Iterable [ str ]) -> Iterable [ Path ]: \"\"\"Generator that yields paths matching glob-style patterns relative to directory. Args: directory (Path): a directory patterns (Iterable[str]): glob-style patterns relative to directory Yields: Path: paths matching provided patterns relative to directory \"\"\" for pattern in patterns : yield from directory . glob ( pattern )","title":"globs()"},{"location":"api-reference/nbautoexport-clean/#nbautoexport.clean.notebook_exports_generator","text":"Generator that yields paths of expected exports for a notebook given an export_format and an organize_by setting. Parameters: Name Type Description Default notebook JupyterNotebook notebook to get export paths for required export_format ExportFormat export format required organize_by OrganizeBy type of subfolder approach required !!! yields Path: expected export paths given notebook and configuration options Source code in nbautoexport/clean.py def notebook_exports_generator ( notebook : JupyterNotebook , export_format : ExportFormat , organize_by : OrganizeBy ) -> Iterable [ Path ]: \"\"\"Generator that yields paths of expected exports for a notebook given an export_format and an organize_by setting. Args: notebook (JupyterNotebook): notebook to get export paths for export_format (ExportFormat): export format organize_by (OrganizeBy): type of subfolder approach Yields: Path: expected export paths given notebook and configuration options \"\"\" if organize_by == OrganizeBy . notebook : subfolder = notebook . path . parent / notebook . name elif organize_by == OrganizeBy . extension : subfolder = notebook . path . parent / export_format . value yield subfolder yield subfolder / f \" { notebook . name }{ get_extension ( notebook , export_format ) } \" if export_format in FORMATS_WITH_IMAGE_DIR : image_dir = subfolder / f \" { notebook . name } _files\" if image_dir . exists (): yield image_dir yield from image_dir . iterdir ()","title":"notebook_exports_generator()"},{"location":"api-reference/nbautoexport-export/","text":"nbautoexport.export CopyToSubfolderPostProcessor postprocess ( self , input ) Save converted file to a separate directory, removing cell numbers. Source code in nbautoexport/export.py def postprocess ( self , input : str ): \"\"\" Save converted file to a separate directory, removing cell numbers.\"\"\" if self . subfolder is None : return input : Path = Path ( input ) new_dir = input . parent / self . subfolder new_dir . mkdir ( exist_ok = True ) new_path = new_dir / input . name if self . export_format == ExportFormat . pdf : # Can't read pdf file as unicode, skip rest of postprocessing and just copy input . replace ( new_path ) return # Rewrite converted file to new path, removing cell numbers with input . open ( \"r\" ) as f : text = f . read () with new_path . open ( \"w\" ) as f : f . write ( re . sub ( r \"\\n#\\sIn\\[(([0-9]+)|(\\s))\\]:\\n {2} \" , \"\" , text )) # For some formats, we also need to move the assets directory, for stuff like images if self . export_format in FORMATS_WITH_IMAGE_DIR : assets_dir = input . parent / f \" { input . stem } _files\" if assets_dir . exists () and assets_dir . is_dir (): new_assets_dir = new_dir / f \" { input . stem } _files\" new_assets_dir . mkdir ( exist_ok = True ) for asset in assets_dir . iterdir (): asset . replace ( new_assets_dir / asset . name ) assets_dir . rmdir () input . unlink () export_notebook ( notebook_path , config ) Export a given notebook file given configuration. Parameters: Name Type Description Default notebook_path Path path to notebook to export with nbconvert required config NbAutoexportConfig configuration required Source code in nbautoexport/export.py def export_notebook ( notebook_path : Path , config : NbAutoexportConfig ): \"\"\"Export a given notebook file given configuration. Args: notebook_path (Path): path to notebook to export with nbconvert config (NbAutoexportConfig): configuration \"\"\" with cleared_argv (): converter = NbConvertApp () for export_format in config . export_formats : if config . organize_by == \"notebook\" : subfolder = notebook_path . stem elif config . organize_by == \"extension\" : subfolder = export_format . value converter . postprocessor = CopyToSubfolderPostProcessor ( subfolder = subfolder , export_format = export_format ) converter . export_format = export_format . value converter . initialize () converter . notebooks = [ str ( notebook_path )] converter . convert_notebooks () post_save ( model , os_path , contents_manager ) Post-save hook for converting notebooks to other formats using Jupyter nbconvert and saving in a subfolder. The following arguments are standard for Jupyter post-save hooks. See Jupyter Documentation . Parameters: Name Type Description Default model dict the model representing the file. See Jupyter documentation . required os_path str the filesystem path to the file just written required contents_manager FileContentsManager FileContentsManager instance that hook is bound to required Source code in nbautoexport/export.py def post_save ( model : dict , os_path : str , contents_manager : FileContentsManager ): \"\"\"Post-save hook for converting notebooks to other formats using Jupyter nbconvert and saving in a subfolder. The following arguments are standard for Jupyter post-save hooks. See [Jupyter Documentation]( https://jupyter-notebook.readthedocs.io/en/stable/extending/savehooks.html). Args: model (dict): the model representing the file. See [Jupyter documentation]( https://jupyter-notebook.readthedocs.io/en/stable/extending/contents.html#data-model). os_path (str): the filesystem path to the file just written contents_manager (FileContentsManager): FileContentsManager instance that hook is bound to \"\"\" # only do this for notebooks if model [ \"type\" ] != \"notebook\" : return # only do this if we've added the special indicator file to the working directory os_path = Path ( os_path ) cwd = os_path . parent save_progress_indicator = cwd / SAVE_PROGRESS_INDICATOR_FILE should_convert = save_progress_indicator . exists () if should_convert : config = NbAutoexportConfig . parse_file ( path = save_progress_indicator , content_type = \"application/json\" ) export_notebook ( os_path , config = config )","title":"nbautoexport.export"},{"location":"api-reference/nbautoexport-export/#nbautoexportexport","text":"","title":"nbautoexport.export"},{"location":"api-reference/nbautoexport-export/#nbautoexport.export.CopyToSubfolderPostProcessor","text":"","title":"CopyToSubfolderPostProcessor"},{"location":"api-reference/nbautoexport-export/#nbautoexport.export.CopyToSubfolderPostProcessor.postprocess","text":"Save converted file to a separate directory, removing cell numbers. Source code in nbautoexport/export.py def postprocess ( self , input : str ): \"\"\" Save converted file to a separate directory, removing cell numbers.\"\"\" if self . subfolder is None : return input : Path = Path ( input ) new_dir = input . parent / self . subfolder new_dir . mkdir ( exist_ok = True ) new_path = new_dir / input . name if self . export_format == ExportFormat . pdf : # Can't read pdf file as unicode, skip rest of postprocessing and just copy input . replace ( new_path ) return # Rewrite converted file to new path, removing cell numbers with input . open ( \"r\" ) as f : text = f . read () with new_path . open ( \"w\" ) as f : f . write ( re . sub ( r \"\\n#\\sIn\\[(([0-9]+)|(\\s))\\]:\\n {2} \" , \"\" , text )) # For some formats, we also need to move the assets directory, for stuff like images if self . export_format in FORMATS_WITH_IMAGE_DIR : assets_dir = input . parent / f \" { input . stem } _files\" if assets_dir . exists () and assets_dir . is_dir (): new_assets_dir = new_dir / f \" { input . stem } _files\" new_assets_dir . mkdir ( exist_ok = True ) for asset in assets_dir . iterdir (): asset . replace ( new_assets_dir / asset . name ) assets_dir . rmdir () input . unlink ()","title":"postprocess()"},{"location":"api-reference/nbautoexport-export/#nbautoexport.export.export_notebook","text":"Export a given notebook file given configuration. Parameters: Name Type Description Default notebook_path Path path to notebook to export with nbconvert required config NbAutoexportConfig configuration required Source code in nbautoexport/export.py def export_notebook ( notebook_path : Path , config : NbAutoexportConfig ): \"\"\"Export a given notebook file given configuration. Args: notebook_path (Path): path to notebook to export with nbconvert config (NbAutoexportConfig): configuration \"\"\" with cleared_argv (): converter = NbConvertApp () for export_format in config . export_formats : if config . organize_by == \"notebook\" : subfolder = notebook_path . stem elif config . organize_by == \"extension\" : subfolder = export_format . value converter . postprocessor = CopyToSubfolderPostProcessor ( subfolder = subfolder , export_format = export_format ) converter . export_format = export_format . value converter . initialize () converter . notebooks = [ str ( notebook_path )] converter . convert_notebooks ()","title":"export_notebook()"},{"location":"api-reference/nbautoexport-export/#nbautoexport.export.post_save","text":"Post-save hook for converting notebooks to other formats using Jupyter nbconvert and saving in a subfolder. The following arguments are standard for Jupyter post-save hooks. See Jupyter Documentation . Parameters: Name Type Description Default model dict the model representing the file. See Jupyter documentation . required os_path str the filesystem path to the file just written required contents_manager FileContentsManager FileContentsManager instance that hook is bound to required Source code in nbautoexport/export.py def post_save ( model : dict , os_path : str , contents_manager : FileContentsManager ): \"\"\"Post-save hook for converting notebooks to other formats using Jupyter nbconvert and saving in a subfolder. The following arguments are standard for Jupyter post-save hooks. See [Jupyter Documentation]( https://jupyter-notebook.readthedocs.io/en/stable/extending/savehooks.html). Args: model (dict): the model representing the file. See [Jupyter documentation]( https://jupyter-notebook.readthedocs.io/en/stable/extending/contents.html#data-model). os_path (str): the filesystem path to the file just written contents_manager (FileContentsManager): FileContentsManager instance that hook is bound to \"\"\" # only do this for notebooks if model [ \"type\" ] != \"notebook\" : return # only do this if we've added the special indicator file to the working directory os_path = Path ( os_path ) cwd = os_path . parent save_progress_indicator = cwd / SAVE_PROGRESS_INDICATOR_FILE should_convert = save_progress_indicator . exists () if should_convert : config = NbAutoexportConfig . parse_file ( path = save_progress_indicator , content_type = \"application/json\" ) export_notebook ( os_path , config = config )","title":"post_save()"},{"location":"api-reference/nbautoexport-jupyter_config/","text":"nbautoexport.jupyter_config install_post_save_hook ( config_path = None ) Splices the post save hook into the global Jupyter configuration file Source code in nbautoexport/jupyter_config.py def install_post_save_hook ( config_path : Optional [ Path ] = None ): \"\"\"Splices the post save hook into the global Jupyter configuration file\"\"\" if config_path is None : config_dir = jupyter_config_dir () config_path = Path ( config_dir ) / \"jupyter_notebook_config.py\" config_path = config_path . expanduser () . resolve () if not config_path . exists (): logger . debug ( f \"No existing Jupyter configuration detected at { config_path } . Creating...\" ) config_path . parent . mkdir ( exist_ok = True , parents = True ) with config_path . open ( \"w\" ) as fp : fp . write ( post_save_hook_initialize_block ) logger . info ( \"nbautoexport post-save hook installed.\" ) return # If config exists, check for existing nbautoexport initialize block and install as appropriate logger . debug ( f \"Detected existing Jupyter configuration at { config_path } \" ) with config_path . open ( \"r\" ) as fp : config = fp . read () if block_regex . search ( config ): logger . debug ( \"Detected existing nbautoexport post-save hook.\" ) version_match = version_regex . search ( config ) if version_match : existing_version = version_match . group () logger . debug ( f \"Existing post-save hook is version { existing_version } \" ) else : existing_version = \"\" logger . debug ( \"Existing post-save hook predates versioning.\" ) if parse_version ( existing_version ) < parse_version ( __version__ ): logger . info ( f \"Updating nbautoexport post-save hook with version { __version__ } ...\" ) with config_path . open ( \"w\" ) as fp : # Open as w replaces existing file. We're replacing entire config. fp . write ( block_regex . sub ( post_save_hook_initialize_block , config )) else : logger . debug ( \"No changes made.\" ) return else : logger . info ( \"Installing post-save hook.\" ) with config_path . open ( \"a\" ) as fp : # Open as a just appends. We append block at the end of existing file. fp . write ( \" \\n \" + post_save_hook_initialize_block ) logger . info ( \"nbautoexport post-save hook installed.\" )","title":"nbautoexport.jupyter_config"},{"location":"api-reference/nbautoexport-jupyter_config/#nbautoexportjupyter_config","text":"","title":"nbautoexport.jupyter_config"},{"location":"api-reference/nbautoexport-jupyter_config/#nbautoexport.jupyter_config.install_post_save_hook","text":"Splices the post save hook into the global Jupyter configuration file Source code in nbautoexport/jupyter_config.py def install_post_save_hook ( config_path : Optional [ Path ] = None ): \"\"\"Splices the post save hook into the global Jupyter configuration file\"\"\" if config_path is None : config_dir = jupyter_config_dir () config_path = Path ( config_dir ) / \"jupyter_notebook_config.py\" config_path = config_path . expanduser () . resolve () if not config_path . exists (): logger . debug ( f \"No existing Jupyter configuration detected at { config_path } . Creating...\" ) config_path . parent . mkdir ( exist_ok = True , parents = True ) with config_path . open ( \"w\" ) as fp : fp . write ( post_save_hook_initialize_block ) logger . info ( \"nbautoexport post-save hook installed.\" ) return # If config exists, check for existing nbautoexport initialize block and install as appropriate logger . debug ( f \"Detected existing Jupyter configuration at { config_path } \" ) with config_path . open ( \"r\" ) as fp : config = fp . read () if block_regex . search ( config ): logger . debug ( \"Detected existing nbautoexport post-save hook.\" ) version_match = version_regex . search ( config ) if version_match : existing_version = version_match . group () logger . debug ( f \"Existing post-save hook is version { existing_version } \" ) else : existing_version = \"\" logger . debug ( \"Existing post-save hook predates versioning.\" ) if parse_version ( existing_version ) < parse_version ( __version__ ): logger . info ( f \"Updating nbautoexport post-save hook with version { __version__ } ...\" ) with config_path . open ( \"w\" ) as fp : # Open as w replaces existing file. We're replacing entire config. fp . write ( block_regex . sub ( post_save_hook_initialize_block , config )) else : logger . debug ( \"No changes made.\" ) return else : logger . info ( \"Installing post-save hook.\" ) with config_path . open ( \"a\" ) as fp : # Open as a just appends. We append block at the end of existing file. fp . write ( \" \\n \" + post_save_hook_initialize_block ) logger . info ( \"nbautoexport post-save hook installed.\" )","title":"install_post_save_hook()"},{"location":"api-reference/nbautoexport-sentinel/","text":"nbautoexport.sentinel ExportFormat An enumeration. OrganizeBy An enumeration. install_sentinel ( directory , config , overwrite ) Writes the configuration file to a specified directory. Source code in nbautoexport/sentinel.py def install_sentinel ( directory : Path , config : NbAutoexportConfig , overwrite : bool ): \"\"\"Writes the configuration file to a specified directory.\"\"\" sentinel_path = directory / SAVE_PROGRESS_INDICATOR_FILE if sentinel_path . exists () and ( not overwrite ): raise FileExistsError ( f \"\"\"Detected existing autoexport configuration at { sentinel_path } . \"\"\" \"\"\"If you wish to overwrite, use the --overwrite flag.\"\"\" ) else : logger . info ( f \"Creating configuration file at { sentinel_path } \" ) logger . info ( f \" \\n { config . json ( indent = 2 ) } \" ) with sentinel_path . open ( \"w\" ) as fp : fp . write ( config . json ( indent = 2 ))","title":"nbautoexport.sentinel"},{"location":"api-reference/nbautoexport-sentinel/#nbautoexportsentinel","text":"","title":"nbautoexport.sentinel"},{"location":"api-reference/nbautoexport-sentinel/#nbautoexport.sentinel.ExportFormat","text":"An enumeration.","title":"ExportFormat"},{"location":"api-reference/nbautoexport-sentinel/#nbautoexport.sentinel.OrganizeBy","text":"An enumeration.","title":"OrganizeBy"},{"location":"api-reference/nbautoexport-sentinel/#nbautoexport.sentinel.install_sentinel","text":"Writes the configuration file to a specified directory. Source code in nbautoexport/sentinel.py def install_sentinel ( directory : Path , config : NbAutoexportConfig , overwrite : bool ): \"\"\"Writes the configuration file to a specified directory.\"\"\" sentinel_path = directory / SAVE_PROGRESS_INDICATOR_FILE if sentinel_path . exists () and ( not overwrite ): raise FileExistsError ( f \"\"\"Detected existing autoexport configuration at { sentinel_path } . \"\"\" \"\"\"If you wish to overwrite, use the --overwrite flag.\"\"\" ) else : logger . info ( f \"Creating configuration file at { sentinel_path } \" ) logger . info ( f \" \\n { config . json ( indent = 2 ) } \" ) with sentinel_path . open ( \"w\" ) as fp : fp . write ( config . json ( indent = 2 ))","title":"install_sentinel()"},{"location":"api-reference/nbautoexport-utils/","text":"nbautoexport.utils JupyterNotebook pydantic-model __hash__ ( self ) special Return hash(self). Source code in nbautoexport/utils.py def __hash__ ( self ): return hash ( self . json ()) cleared_argv () Context manager that temporarily clears sys.argv. Useful for wrapping nbconvert so unexpected arguments from outer program (e.g., nbautoexport) aren't passed to nbconvert. Source code in nbautoexport/utils.py @contextmanager def cleared_argv (): \"\"\"Context manager that temporarily clears sys.argv. Useful for wrapping nbconvert so unexpected arguments from outer program (e.g., nbautoexport) aren't passed to nbconvert. \"\"\" prev_argv = [ arg for arg in sys . argv ] sys . argv = [ sys . argv [ 0 ]] try : yield finally : sys . argv = prev_argv find_notebooks ( directory ) Finds Jupyter notebooks in a directory. Not recursive. Parameters: Name Type Description Default directory Path directory to search for notebook files required Returns: Type Description List[nbautoexport.utils.JupyterNotebook] List[JupyterNotebook]: notebooks found Source code in nbautoexport/utils.py def find_notebooks ( directory : Path ) -> List [ JupyterNotebook ]: \"\"\"Finds Jupyter notebooks in a directory. Not recursive. Args: directory (Path): directory to search for notebook files Returns: List[JupyterNotebook]: notebooks found \"\"\" notebooks = [] for subfile in directory . iterdir (): if subfile . is_file () and subfile . name : try : notebook = nbformat . read ( str ( subfile ), as_version = nbformat . NO_CONVERT ) nbformat . validate ( notebook ) notebooks . append ( JupyterNotebook ( path = subfile , metadata = notebook . metadata )) except Exception as e : if subfile . suffix . lower () == \".ipynb\" : warn ( f \"Error reading { subfile . resolve () } as Jupyter Notebook: \" + f \"[ { type ( e ) . __name__ } ] { e } \" ) return notebooks working_directory ( directory ) Changes working directory and returns to previous on exit. Source code in nbautoexport/utils.py @contextmanager def working_directory ( directory : Path ): \"\"\"Changes working directory and returns to previous on exit.\"\"\" prev_cwd = Path . cwd () os . chdir ( directory ) try : yield finally : os . chdir ( prev_cwd )","title":"nbautoexport.utils"},{"location":"api-reference/nbautoexport-utils/#nbautoexportutils","text":"","title":"nbautoexport.utils"},{"location":"api-reference/nbautoexport-utils/#nbautoexport.utils.JupyterNotebook","text":"","title":"JupyterNotebook"},{"location":"api-reference/nbautoexport-utils/#nbautoexport.utils.JupyterNotebook.__hash__","text":"Return hash(self). Source code in nbautoexport/utils.py def __hash__ ( self ): return hash ( self . json ())","title":"__hash__()"},{"location":"api-reference/nbautoexport-utils/#nbautoexport.utils.cleared_argv","text":"Context manager that temporarily clears sys.argv. Useful for wrapping nbconvert so unexpected arguments from outer program (e.g., nbautoexport) aren't passed to nbconvert. Source code in nbautoexport/utils.py @contextmanager def cleared_argv (): \"\"\"Context manager that temporarily clears sys.argv. Useful for wrapping nbconvert so unexpected arguments from outer program (e.g., nbautoexport) aren't passed to nbconvert. \"\"\" prev_argv = [ arg for arg in sys . argv ] sys . argv = [ sys . argv [ 0 ]] try : yield finally : sys . argv = prev_argv","title":"cleared_argv()"},{"location":"api-reference/nbautoexport-utils/#nbautoexport.utils.find_notebooks","text":"Finds Jupyter notebooks in a directory. Not recursive. Parameters: Name Type Description Default directory Path directory to search for notebook files required Returns: Type Description List[nbautoexport.utils.JupyterNotebook] List[JupyterNotebook]: notebooks found Source code in nbautoexport/utils.py def find_notebooks ( directory : Path ) -> List [ JupyterNotebook ]: \"\"\"Finds Jupyter notebooks in a directory. Not recursive. Args: directory (Path): directory to search for notebook files Returns: List[JupyterNotebook]: notebooks found \"\"\" notebooks = [] for subfile in directory . iterdir (): if subfile . is_file () and subfile . name : try : notebook = nbformat . read ( str ( subfile ), as_version = nbformat . NO_CONVERT ) nbformat . validate ( notebook ) notebooks . append ( JupyterNotebook ( path = subfile , metadata = notebook . metadata )) except Exception as e : if subfile . suffix . lower () == \".ipynb\" : warn ( f \"Error reading { subfile . resolve () } as Jupyter Notebook: \" + f \"[ { type ( e ) . __name__ } ] { e } \" ) return notebooks","title":"find_notebooks()"},{"location":"api-reference/nbautoexport-utils/#nbautoexport.utils.working_directory","text":"Changes working directory and returns to previous on exit. Source code in nbautoexport/utils.py @contextmanager def working_directory ( directory : Path ): \"\"\"Changes working directory and returns to previous on exit.\"\"\" prev_cwd = Path . cwd () os . chdir ( directory ) try : yield finally : os . chdir ( prev_cwd )","title":"working_directory()"},{"location":"command-reference/clean/","text":"nbautoexport clean nbautoexport clean --help Usage: nbautoexport clean [OPTIONS] DIRECTORY (EXPERIMENTAL) Remove subfolders/files not matching .nbautoexport configuration and existing notebooks. Known limitations: - Not able to correctly handle additional intended files, such as image assets or non-notebook-related files. Arguments: DIRECTORY Directory to clean. Must have a .nbautoexport config file. [required] Options: -e, --exclude TEXT Glob-style patterns that designate files to exclude from deletion. Combined with any patterns specified in .nbautoexport config file. [default: ] -y, --yes Assume 'yes' answer to confirmation prompt to delete files. [default: False] --dry-run Show files that would be removed, without actually removing. [default: False] --help Show this message and exit.","title":"nbautoexport clean"},{"location":"command-reference/clean/#nbautoexport-clean","text":"nbautoexport clean --help Usage: nbautoexport clean [OPTIONS] DIRECTORY (EXPERIMENTAL) Remove subfolders/files not matching .nbautoexport configuration and existing notebooks. Known limitations: - Not able to correctly handle additional intended files, such as image assets or non-notebook-related files. Arguments: DIRECTORY Directory to clean. Must have a .nbautoexport config file. [required] Options: -e, --exclude TEXT Glob-style patterns that designate files to exclude from deletion. Combined with any patterns specified in .nbautoexport config file. [default: ] -y, --yes Assume 'yes' answer to confirmation prompt to delete files. [default: False] --dry-run Show files that would be removed, without actually removing. [default: False] --help Show this message and exit.","title":"nbautoexport clean"},{"location":"command-reference/configure/","text":"nbautoexport configure nbautoexport configure --help Usage: nbautoexport configure [OPTIONS] DIRECTORY Create a .nbautoexport configuration file in a directory. If nbautoexport has been installed with the 'install' command, then Jupyter will automatically export any notebooks on save that are in the same directory as the .nbautoexport file. An .nbautoexport configuration file only applies to that directory, nonrecursively. You must independently configure other directories containing notebooks. Arguments: DIRECTORY Path to directory of notebook files to configure with nbautoexport. [required] Options: -f, --export-format [asciidoc|html|latex|markdown|notebook|pdf|rst|script|slides] File format(s) to save for each notebook. Multiple formats should be provided using multiple flags, e.g., '-f script -f html -f markdown'. [default: ExportFormat.script] -b, --organize-by [notebook|extension] Whether to save exported file(s) in a subfolder per notebook or per export format. [default: extension] -e, --clean-exclude TEXT Glob-style patterns that designate files to exclude from deletion when running clean command. [default: ] -o, --overwrite Overwrite existing configuration, if one is detected. [default: False] -v, --verbose Verbose mode [default: False] --help Show this message and exit.","title":"nbautoexport configure"},{"location":"command-reference/configure/#nbautoexport-configure","text":"nbautoexport configure --help Usage: nbautoexport configure [OPTIONS] DIRECTORY Create a .nbautoexport configuration file in a directory. If nbautoexport has been installed with the 'install' command, then Jupyter will automatically export any notebooks on save that are in the same directory as the .nbautoexport file. An .nbautoexport configuration file only applies to that directory, nonrecursively. You must independently configure other directories containing notebooks. Arguments: DIRECTORY Path to directory of notebook files to configure with nbautoexport. [required] Options: -f, --export-format [asciidoc|html|latex|markdown|notebook|pdf|rst|script|slides] File format(s) to save for each notebook. Multiple formats should be provided using multiple flags, e.g., '-f script -f html -f markdown'. [default: ExportFormat.script] -b, --organize-by [notebook|extension] Whether to save exported file(s) in a subfolder per notebook or per export format. [default: extension] -e, --clean-exclude TEXT Glob-style patterns that designate files to exclude from deletion when running clean command. [default: ] -o, --overwrite Overwrite existing configuration, if one is detected. [default: False] -v, --verbose Verbose mode [default: False] --help Show this message and exit.","title":"nbautoexport configure"},{"location":"command-reference/export/","text":"nbautoexport export nbautoexport export --help Usage: nbautoexport export [OPTIONS] INPUT Manually export notebook or directory of notebooks. An .nbautoexport configuration file in same directory as notebook(s) will be used if it exists. Configuration options specified by command-line options will override configuration file. If no existing configuration option exists and no values are provided, default values will be used. The export command will not do cleaning, regardless of the 'clean' setting in an .nbautoexport configuration file. Arguments: INPUT Path to notebook file or directory of notebook files to export. [required] Options: -f, --export-format [asciidoc|html|latex|markdown|notebook|pdf|rst|script|slides] File format(s) to save for each notebook. Multiple formats should be provided using multiple flags, e.g., '-f script -f html -f markdown'. Provided values will override existing .nbautoexport config files. If neither provided, defaults to [<ExportFormat.script: 'script'>]. [default: ] -b, --organize-by [notebook|extension] Whether to save exported file(s) in a subfolder per notebook or per export format. Provided values will override existing .nbautoexport config files. If neither provided, defaults to 'extension'. --help Show this message and exit.","title":"nbautoexport export"},{"location":"command-reference/export/#nbautoexport-export","text":"nbautoexport export --help Usage: nbautoexport export [OPTIONS] INPUT Manually export notebook or directory of notebooks. An .nbautoexport configuration file in same directory as notebook(s) will be used if it exists. Configuration options specified by command-line options will override configuration file. If no existing configuration option exists and no values are provided, default values will be used. The export command will not do cleaning, regardless of the 'clean' setting in an .nbautoexport configuration file. Arguments: INPUT Path to notebook file or directory of notebook files to export. [required] Options: -f, --export-format [asciidoc|html|latex|markdown|notebook|pdf|rst|script|slides] File format(s) to save for each notebook. Multiple formats should be provided using multiple flags, e.g., '-f script -f html -f markdown'. Provided values will override existing .nbautoexport config files. If neither provided, defaults to [<ExportFormat.script: 'script'>]. [default: ] -b, --organize-by [notebook|extension] Whether to save exported file(s) in a subfolder per notebook or per export format. Provided values will override existing .nbautoexport config files. If neither provided, defaults to 'extension'. --help Show this message and exit.","title":"nbautoexport export"},{"location":"command-reference/install/","text":"nbautoexport install nbautoexport install --help Usage: nbautoexport install [OPTIONS] Register nbautoexport post-save hook with Jupyter. Note that if you already have a Jupyter server running, you will need to restart in order for it to take effect. This is a one-time installation. This works by adding an initialization block in your Jupyter config file that will register nbautoexport's post-save function. If an nbautoexport initialization block already exists and is from an older version of nbautoexport, this command will replace it with an updated version. Options: --jupyter-config FILE Path to config file. If not specified (default), will determine appropriate path used by Jupyter. You should only specify this option if you use a nonstandard config file path that you explicitly pass to Jupyter with the --config option at startup. --help Show this message and exit.","title":"nbautoexport install"},{"location":"command-reference/install/#nbautoexport-install","text":"nbautoexport install --help Usage: nbautoexport install [OPTIONS] Register nbautoexport post-save hook with Jupyter. Note that if you already have a Jupyter server running, you will need to restart in order for it to take effect. This is a one-time installation. This works by adding an initialization block in your Jupyter config file that will register nbautoexport's post-save function. If an nbautoexport initialization block already exists and is from an older version of nbautoexport, this command will replace it with an updated version. Options: --jupyter-config FILE Path to config file. If not specified (default), will determine appropriate path used by Jupyter. You should only specify this option if you use a nonstandard config file path that you explicitly pass to Jupyter with the --config option at startup. --help Show this message and exit.","title":"nbautoexport install"}]}